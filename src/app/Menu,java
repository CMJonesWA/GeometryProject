/**
 * @author Nathaniel Adams, Levi Kruse, Jonathan Sandberg, Craig Jones
 * @email nacatcrazy@gmail
 * @create date 2020-02-07 14:30:29
 * @modify date 2020-02-08 14:06:26
 * @desc This file is going to be the main foundation that will communcate to the lower classes such as the Geometry class
 *       Make your own equation class and if we have time to simfly your output. In this file I will be using ANSI escape 
 *       codes to add color to the console window for more information on ANSI escape codes make sure to read https://en.wikipedia.org/wiki/ANSI_escape_code.
 *       
 */


package app;

import java.util.Scanner;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

//  ===============
public class Menu {

//  ===============================================================================
    enum Choices {
        RECTANGLE, CIRCLE, TRIANGLE, TRAPIZOID, SPHERE, CUBE, CONE, CREATEOWN, QUIT 
    };
//  ===============================================================================
    
    private Shapes shapes = new Shapes();
    private Scanner keyboard = new Scanner(System.in);
    Choices choices;

//  ===============
    public Menu() {

        System.out.println("Menu Constructor Invoked.");
        
    }// Constructor 
//  ===============

//  ============================
    public void Introduction() {

        System.out.print("\u001b[31m=============================\u001b[0m\n" + // \u001b[31m is the ANSI code for red \u001b[0m resets.
                         "This program will be able to \n" +
                         "calculate many shape areas of\n" +
                         "3d objects and 2d objects    \n" +
                         "\u001b[31m=============================\u001b[0m\n" );

    }// Intruduction Function


//  =======================
    public void Display() {

        System.out.println();
        System.out.print("\u001b[31m===================================\u001b[0m\n" + // \u001b[31m is the ANSI code for red \u001b[0m resets.
                         "\u001b[34m1.\u001b[0m Rectangle       \u001b[34m2.\u001b[0m Circle       \n" + // \u001b[34m1 is the ANSI code for blue.
                         "\u001b[34m3.\u001b[0m Triangle        \u001b[34m4.\u001b[0m Trapizoid    \n" + 
                         "\u001b[34m5.\u001b[0m Sphere          \u001b[34m6.\u001b[0m Cube         \n" +
                         "\u001b[34m7.\u001b[0m Cone            \u001b[34m8.\u001b[0m Create my own\n" +
                         "\u001b[34m9.\u001b[0m Quit                            \n" +
                         "\u001b[31m===================================\u001b[0m\n");
                    
    }// Display Function
//  ====================

//  =========================
    public void QueryUser() {

        int answer = 0;

        System.out.println("\nPlease enter your Selection: \u001b[34m");
        try {
            answer = keyboard.nextInt();
        } 
        catch(Exception e) {
            System.out.println("Error: That is not a valid integer!");
        }
        if ((answer > 9)||(answer < 1)) 
            System.out.println("Error: The integer that has been entered is out of range or invalid!");


        switch(answer) {
            case 1: choices = Choices.RECTANGLE;
                break;
            case 2: choices = Choices.CIRCLE;
                break;
            case 3: choices = Choices.TRIANGLE;
                break;
            case 4: choices = Choices.TRAPIZOID;
                break;
            case 5: choices = Choices.SPHERE;
                break;
            case 6: choices = Choices.CUBE;
                break;
            case 7: choices = Choices.CONE;
                break;
            case 8: choices = Choices.CREATEOWN;
                break;
            case 9: choices = Choices.QUIT;
                break;
        }
        System.out.print("\u001b[0m"); // this will change the color back to normal.

    }// QueryUser Function
//  ======================

//  ===========================
    public boolean Continue() {
        if (choices == Choices.QUIT) 
            return false;
        else
            return true;
    }// Continue Function Returning Boolean
//  ========================================

//  ==============================
    public void ProcessCommand() {

        switch(choices) {
            case RECTANGLE: 
            
                break; 
            case CIRCLE:

                break;
            case TRIANGLE:

                break;
            case TRAPIZOID:

                break;
            case SPHERE:

                break;
            case CUBE:

                break;
            case CONE:

                break;
            case CREATEOWN:

                break;
            case QUIT:
                    System.out.println("Closing Program, have a wonderful day!");
                break;
            default: System.out.println("Error: Menu.ProcessCommand() an error has occured.");
        }


    }// ProcessCommand Function
//  ===========================

//  ====================================================================
    public static void ClearScreen() throws IOException, InterruptedException {

        /* ================SCRAPPED=====================================
        System.out.print("\033[H\033[2J");// This is an ANSI excape code
        // \033 stands for ESC(ANSI value 27)
        // Which starts the command as ESC[
        // then H moves the cursor to the top left corner of the screen
        // and \033[J clears the part of the screen from the cursor to the end of the screen
        // This functionally the ctrl + L
        // For more information on ANSI escape codes visit: https://en.wikipedia.org/wiki/ANSI_escape_code
        System.out.flush();
        // Flush must happen due to the use of a ANSI and not using printf
        ==================================================================*/

        System.out.print("\nClearing screen ");
        for (int ii = 0; ii < 3; ii++ ) {
            System.out.print(". ");
            TimeUnit.SECONDS.sleep(1);// This is a delay function for 3 seconds.
        }// This is a delay function for 3 seconds.

        final String os = System.getProperty("os.name"); 
        // Since the value of string is not changed ever again it is better to make it final which means it can not be changed.
        // The System.getProperty will retrieve the exact string name of the system.
        if (os.contains("Windows")) // This will check the string if it contains Windows
            new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            // Will run the object to run the command of to open cmd then command then cls.
        else 
            Runtime.getRuntime().exec("clear");
            // Then if it's not windows it will excetute the command clear for all the rest of the ios.

    }// ClearScreen Function()
//  ==========================

//  =====================
    public void close() {

        keyboard.close();
        shapes.close();
        shapes = null;

    }// Close Function
//  ==================


}// Class Menu
//  ==========
